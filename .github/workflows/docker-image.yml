name: build-docker-image

on:
  - workflow_dispatch

env:
  REGISTRY_IMAGE: ghcr.io/sabonerune/voicevox_engine-unofficial-docker-image

jobs:
  build:
    permissions:
      packages: write

    strategy:
      matrix:
        target:
          - cpu-ubuntu20-x64
          - cpu-ubuntu22-x64
          - cpu-ubuntu20-arm64
          - cpu-ubuntu22-arm64
          - nvidia-ubuntu20
          - nvidia-ubuntu22
        include:
          - os: ubuntu-latest
          - target: cpu-ubuntu20-arm64
            os: ubuntu-24.04-arm
          - target: cpu-ubuntu22-arm64
            os: ubuntu-24.04-arm

    runs-on: ${{ matrix.os }}

    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build for nvidia
        if: ${{ startsWith(matrix.target, 'nvidia') }}
        uses: docker/bake-action@v6
        with:
          push: true
          targets: ${{ matrix.target }}
        env:
          TAG_PREFIX: ${{ env.REGISTRY_IMAGE }}

      - name: Build
        if: ${{ !startsWith(matrix.target, 'nvidia') }}
        id: bake
        uses: docker/bake-action@v6
        with:
          targets: ${{ matrix.target }}
          set: |
            *.output=type=image,push-by-digest=true,name-canonical=true,push=true
            *.tags=${{ env.REGISTRY_IMAGE }}

      - name: Export digest
        if: ${{ !startsWith(matrix.target, 'nvidia') }}
        run: |
          mkdir -p ${{ runner.temp }}/digests
          digest="${{ fromJSON(steps.bake.outputs.metadata)[matrix.target]['containerimage.digest'] }}"
          echo $digest > ${{ runner.temp }}/digests/${{ matrix.target }}

      - name: Upload digest
        if: ${{ !startsWith(matrix.target, 'nvidia') }}
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ matrix.target }}
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    permissions:
      packages: write
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - uses: actions/checkout@v4
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/digests
          pattern: digests-*
          merge-multiple: true

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Print Docker bake
        run: |
          TAG_PREFIX=${{ env.REGISTRY_IMAGE }} docker buildx bake --print > ${{ runner.temp }}/print_bake.json

      - name: Create manifest list and push for cpu-ubuntu20
        working-directory: ${{ runner.temp }}/digests
        run: |
          tags=$(jq -cr '[[.target | to_entries[] | select(.key | startswith("cpu-ubuntu20")).value.tags[]] | unique[] | "-t " + .] | join(" ")' \
            ${{ runner.temp }}/print_bake.json)
          images=$(cat cpu-ubuntu20-* | printf '${{ env.REGISTRY_IMAGE }}@%s ' `cat`)
          docker buildx imagetools create $tags $images

      - name: Create manifest list and push for cpu-ubuntu22
        working-directory: ${{ runner.temp }}/digests
        run: |
          tags=$(jq -cr '[[.target | to_entries[] | select(.key | startswith("cpu-ubuntu22")).value.tags[]] | unique[] | "-t " + .] | join(" ")' \
            ${{ runner.temp }}/print_bake.json)
          images=$(cat cpu-ubuntu22-* | printf '${{ env.REGISTRY_IMAGE }}@%s ' `cat`)
          docker buildx imagetools create $tags $images
